// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String     @id @default(cuid())
  name                    String     @default("")
  email                   String     @unique @default("")
  password                String?
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order[]    @relation("Order_user")
  role                    Role?      @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?    @map("role")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Category {
  id               String     @id @default(cuid())
  name             String     @default("")
  parentCategories Category[] @relation("Category_childCategories")
  childCategories  Category[] @relation("Category_childCategories")
  products         Product[]  @relation("Category_products")
}

model Product {
  id                                  String              @id @default(cuid())
  name                                String              @default("")
  status                              String?             @default("DRAFT")
  description                         String              @default("")
  additionalInformation               Json                @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  options                             ProductOption[]     @relation("ProductOption_product")
  variants                            ProductVariant[]    @relation("ProductVariant_product")
  vendor                              Vendor?             @relation("Product_vendor", fields: [vendorId], references: [id])
  vendorId                            String?             @map("vendor")
  from_Category_products              Category[]          @relation("Category_products")
  from_Stock_product                  Stock[]             @relation("Stock_product")
  from_CartItem_product               CartItem[]          @relation("CartItem_product")
  from_DiscountCondition_productsIsIn DiscountCondition[] @relation("DiscountCondition_productsIsIn")
  from_DiscountAction_freebieProducts DiscountAction[]    @relation("DiscountAction_freebieProducts")

  @@index([vendorId])
}

model ProductOption {
  id           String               @id @default(cuid())
  product      Product?             @relation("ProductOption_product", fields: [productId], references: [id])
  productId    String?              @map("product")
  optionName   ProductOptionName?   @relation("ProductOption_optionName", fields: [optionNameId], references: [id])
  optionNameId String?              @map("optionName")
  optionValues ProductOptionValue[] @relation("ProductOption_optionValues")

  @@index([productId])
  @@index([optionNameId])
}

model ProductOptionName {
  id                            String          @id @default(cuid())
  optionName                    String          @default("")
  from_ProductOption_optionName ProductOption[] @relation("ProductOption_optionName")
}

model ProductOptionValue {
  id                              String          @id @default(cuid())
  optionValue                     String          @default("")
  from_ProductOption_optionValues ProductOption[] @relation("ProductOption_optionValues")
}

model ProductVariant {
  id             String   @id @default(cuid())
  product        Product? @relation("ProductVariant_product", fields: [productId], references: [id])
  productId      String?  @map("product")
  title          String   @default("")
  enabled        String?  @default("YES")
  defaultVariant String?  @default("NO")
  description    String   @default("")
  image          Json?
  regularPrice   Int
  salePrice      Int?
  length         Int
  width          Int
  height         Int
  weight         Int
  stock          Stock?   @relation("ProductVariant_stock", fields: [stockId], references: [id])
  stockId        String?  @unique @map("stock")

  @@index([productId])
}

model ProductImage {
  id                   String      @id @default(cuid())
  image                Json?
  altText              String      @default("")
  from_OrderItem_photo OrderItem[] @relation("OrderItem_photo")
}

model Stock {
  id             String          @id @default(cuid())
  product        Product?        @relation("Stock_product", fields: [productId], references: [id])
  productId      String?         @map("product")
  variant        ProductVariant? @relation("ProductVariant_stock")
  stockQuantity  Int
  dateOfPurchase DateTime?

  @@index([productId])
}

model Vendor {
  id           String    @id @default(cuid())
  name         String    @default("")
  mobileNumber String    @default("")
  address      String    @default("")
  products     Product[] @relation("Product_vendor")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  product   Product? @relation("CartItem_product", fields: [productId], references: [id])
  productId String?  @map("product")
  user      User?    @relation("CartItem_user", fields: [userId], references: [id])
  userId    String?  @map("user")

  @@index([productId])
  @@index([userId])
}

model OrderItem {
  id          String        @id @default(cuid())
  name        String        @default("")
  description String        @default("")
  photo       ProductImage? @relation("OrderItem_photo", fields: [photoId], references: [id])
  photoId     String?       @map("photo")
  price       Int?
  quantity    Int?
  order       Order?        @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId     String?       @map("order")

  @@index([photoId])
  @@index([orderId])
}

model Order {
  id     String      @id @default(cuid())
  total  Int?
  items  OrderItem[] @relation("OrderItem_order")
  user   User?       @relation("Order_user", fields: [userId], references: [id])
  userId String?     @map("user")
  charge String      @default("")

  @@index([userId])
}

model Discount {
  id                  String             @id @default(cuid())
  couponCode          String             @default("")
  startDate           DateTime
  endDate             DateTime
  discountCondition   DiscountCondition? @relation("Discount_discountCondition", fields: [discountConditionId], references: [id])
  discountConditionId String?            @map("discountCondition")
  discountAction      DiscountAction?    @relation("Discount_discountAction", fields: [discountActionId], references: [id])
  discountActionId    String?            @map("discountAction")
  offerText           String             @default("")

  @@index([discountConditionId])
  @@index([discountActionId])
}

model DiscountCondition {
  id                              String     @id @default(cuid())
  minimumItemsPerOrder            Int        @default(1)
  productsIsIn                    Product[]  @relation("DiscountCondition_productsIsIn")
  from_Discount_discountCondition Discount[] @relation("Discount_discountCondition")
}

model DiscountAction {
  id                           String     @id @default(cuid())
  discountAmount               Int?
  discountPercentage           Int?
  freeShipping                 String?    @default("NO")
  isSale                       String?    @default("NO")
  freebieProducts              Product[]  @relation("DiscountAction_freebieProducts")
  from_Discount_discountAction Discount[] @relation("Discount_discountAction")
}

model Role {
  id                String  @id @default(cuid())
  name              String  @default("")
  canManageProducts Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canManageCart     Boolean @default(false)
  canManageOrders   Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}