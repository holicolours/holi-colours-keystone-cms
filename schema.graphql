# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  addToCart(productId: ID): CartItem
  checkout(token: String!): Order
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createColor(data: ColorCreateInput!): Color
  createColors(data: [ColorCreateInput!]!): [Color]
  updateColor(where: ColorWhereUniqueInput!, data: ColorUpdateInput!): Color
  updateColors(data: [ColorUpdateArgs!]!): [Color]
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteColors(where: [ColorWhereUniqueInput!]!): [Color]
  createEmbedLink(data: EmbedLinkCreateInput!): EmbedLink
  createEmbedLinks(data: [EmbedLinkCreateInput!]!): [EmbedLink]
  updateEmbedLink(
    where: EmbedLinkWhereUniqueInput!
    data: EmbedLinkUpdateInput!
  ): EmbedLink
  updateEmbedLinks(data: [EmbedLinkUpdateArgs!]!): [EmbedLink]
  deleteEmbedLink(where: EmbedLinkWhereUniqueInput!): EmbedLink
  deleteEmbedLinks(where: [EmbedLinkWhereUniqueInput!]!): [EmbedLink]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductOption(data: ProductOptionCreateInput!): ProductOption
  createProductOptions(data: [ProductOptionCreateInput!]!): [ProductOption]
  updateProductOption(
    where: ProductOptionWhereUniqueInput!
    data: ProductOptionUpdateInput!
  ): ProductOption
  updateProductOptions(data: [ProductOptionUpdateArgs!]!): [ProductOption]
  deleteProductOption(where: ProductOptionWhereUniqueInput!): ProductOption
  deleteProductOptions(
    where: [ProductOptionWhereUniqueInput!]!
  ): [ProductOption]
  createProductOptionName(
    data: ProductOptionNameCreateInput!
  ): ProductOptionName
  createProductOptionNames(
    data: [ProductOptionNameCreateInput!]!
  ): [ProductOptionName]
  updateProductOptionName(
    where: ProductOptionNameWhereUniqueInput!
    data: ProductOptionNameUpdateInput!
  ): ProductOptionName
  updateProductOptionNames(
    data: [ProductOptionNameUpdateArgs!]!
  ): [ProductOptionName]
  deleteProductOptionName(
    where: ProductOptionNameWhereUniqueInput!
  ): ProductOptionName
  deleteProductOptionNames(
    where: [ProductOptionNameWhereUniqueInput!]!
  ): [ProductOptionName]
  createProductOptionValue(
    data: ProductOptionValueCreateInput!
  ): ProductOptionValue
  createProductOptionValues(
    data: [ProductOptionValueCreateInput!]!
  ): [ProductOptionValue]
  updateProductOptionValue(
    where: ProductOptionValueWhereUniqueInput!
    data: ProductOptionValueUpdateInput!
  ): ProductOptionValue
  updateProductOptionValues(
    data: [ProductOptionValueUpdateArgs!]!
  ): [ProductOptionValue]
  deleteProductOptionValue(
    where: ProductOptionValueWhereUniqueInput!
  ): ProductOptionValue
  deleteProductOptionValues(
    where: [ProductOptionValueWhereUniqueInput!]!
  ): [ProductOptionValue]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createAccessory(data: AccessoryCreateInput!): Accessory
  createAccessories(data: [AccessoryCreateInput!]!): [Accessory]
  updateAccessory(
    where: AccessoryWhereUniqueInput!
    data: AccessoryUpdateInput!
  ): Accessory
  updateAccessories(data: [AccessoryUpdateArgs!]!): [Accessory]
  deleteAccessory(where: AccessoryWhereUniqueInput!): Accessory
  deleteAccessories(where: [AccessoryWhereUniqueInput!]!): [Accessory]
  createStock(data: StockCreateInput!): Stock
  createStocks(data: [StockCreateInput!]!): [Stock]
  updateStock(where: StockWhereUniqueInput!, data: StockUpdateInput!): Stock
  updateStocks(data: [StockUpdateArgs!]!): [Stock]
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteStocks(where: [StockWhereUniqueInput!]!): [Stock]
  createInboundStock(data: InboundStockCreateInput!): InboundStock
  createInboundStocks(data: [InboundStockCreateInput!]!): [InboundStock]
  updateInboundStock(
    where: InboundStockWhereUniqueInput!
    data: InboundStockUpdateInput!
  ): InboundStock
  updateInboundStocks(data: [InboundStockUpdateArgs!]!): [InboundStock]
  deleteInboundStock(where: InboundStockWhereUniqueInput!): InboundStock
  deleteInboundStocks(where: [InboundStockWhereUniqueInput!]!): [InboundStock]
  createOutboundStock(data: OutboundStockCreateInput!): OutboundStock
  createOutboundStocks(data: [OutboundStockCreateInput!]!): [OutboundStock]
  updateOutboundStock(
    where: OutboundStockWhereUniqueInput!
    data: OutboundStockUpdateInput!
  ): OutboundStock
  updateOutboundStocks(data: [OutboundStockUpdateArgs!]!): [OutboundStock]
  deleteOutboundStock(where: OutboundStockWhereUniqueInput!): OutboundStock
  deleteOutboundStocks(
    where: [OutboundStockWhereUniqueInput!]!
  ): [OutboundStock]
  createVendor(data: VendorCreateInput!): Vendor
  createVendors(data: [VendorCreateInput!]!): [Vendor]
  updateVendor(where: VendorWhereUniqueInput!, data: VendorUpdateInput!): Vendor
  updateVendors(data: [VendorUpdateArgs!]!): [Vendor]
  deleteVendor(where: VendorWhereUniqueInput!): Vendor
  deleteVendors(where: [VendorWhereUniqueInput!]!): [Vendor]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(
    where: OrderItemWhereUniqueInput!
    data: OrderItemUpdateInput!
  ): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createOrderNote(data: OrderNoteCreateInput!): OrderNote
  createOrderNotes(data: [OrderNoteCreateInput!]!): [OrderNote]
  updateOrderNote(
    where: OrderNoteWhereUniqueInput!
    data: OrderNoteUpdateInput!
  ): OrderNote
  updateOrderNotes(data: [OrderNoteUpdateArgs!]!): [OrderNote]
  deleteOrderNote(where: OrderNoteWhereUniqueInput!): OrderNote
  deleteOrderNotes(where: [OrderNoteWhereUniqueInput!]!): [OrderNote]
  createCustomer(data: CustomerCreateInput!): Customer
  createCustomers(data: [CustomerCreateInput!]!): [Customer]
  updateCustomer(
    where: CustomerWhereUniqueInput!
    data: CustomerUpdateInput!
  ): Customer
  updateCustomers(data: [CustomerUpdateArgs!]!): [Customer]
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteCustomers(where: [CustomerWhereUniqueInput!]!): [Customer]
  createDiscount(data: DiscountCreateInput!): Discount
  createDiscounts(data: [DiscountCreateInput!]!): [Discount]
  updateDiscount(
    where: DiscountWhereUniqueInput!
    data: DiscountUpdateInput!
  ): Discount
  updateDiscounts(data: [DiscountUpdateArgs!]!): [Discount]
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteDiscounts(where: [DiscountWhereUniqueInput!]!): [Discount]
  createDiscountCondition(
    data: DiscountConditionCreateInput!
  ): DiscountCondition
  createDiscountConditions(
    data: [DiscountConditionCreateInput!]!
  ): [DiscountCondition]
  updateDiscountCondition(
    where: DiscountConditionWhereUniqueInput!
    data: DiscountConditionUpdateInput!
  ): DiscountCondition
  updateDiscountConditions(
    data: [DiscountConditionUpdateArgs!]!
  ): [DiscountCondition]
  deleteDiscountCondition(
    where: DiscountConditionWhereUniqueInput!
  ): DiscountCondition
  deleteDiscountConditions(
    where: [DiscountConditionWhereUniqueInput!]!
  ): [DiscountCondition]
  createDiscountAction(data: DiscountActionCreateInput!): DiscountAction
  createDiscountActions(data: [DiscountActionCreateInput!]!): [DiscountAction]
  updateDiscountAction(
    where: DiscountActionWhereUniqueInput!
    data: DiscountActionUpdateInput!
  ): DiscountAction
  updateDiscountActions(data: [DiscountActionUpdateArgs!]!): [DiscountAction]
  deleteDiscountAction(where: DiscountActionWhereUniqueInput!): DiscountAction
  deleteDiscountActions(
    where: [DiscountActionWhereUniqueInput!]!
  ): [DiscountAction]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createShippingZone(data: ShippingZoneCreateInput!): ShippingZone
  createShippingZones(data: [ShippingZoneCreateInput!]!): [ShippingZone]
  updateShippingZone(
    where: ShippingZoneWhereUniqueInput!
    data: ShippingZoneUpdateInput!
  ): ShippingZone
  updateShippingZones(data: [ShippingZoneUpdateArgs!]!): [ShippingZone]
  deleteShippingZone(where: ShippingZoneWhereUniqueInput!): ShippingZone
  deleteShippingZones(where: [ShippingZoneWhereUniqueInput!]!): [ShippingZone]
  createShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod
  createShippingMethods(data: [ShippingMethodCreateInput!]!): [ShippingMethod]
  updateShippingMethod(
    where: ShippingMethodWhereUniqueInput!
    data: ShippingMethodUpdateInput!
  ): ShippingMethod
  updateShippingMethods(data: [ShippingMethodUpdateArgs!]!): [ShippingMethod]
  deleteShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteShippingMethods(
    where: [ShippingMethodWhereUniqueInput!]!
  ): [ShippingMethod]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  role: RoleWhereInput
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  slug: String
  parentCategories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  parentCategoriesCount(where: CategoryWhereInput! = {}): Int
  childCategories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  childCategoriesCount(where: CategoryWhereInput! = {}): Int
  featureInHomePage: Boolean
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  additionalInformation: Category_additionalInformation_Document
  creationDate: DateTime
  lastUpdatedDate: DateTime
}

type Category_additionalInformation_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  parentCategories: CategoryManyRelationFilter
  childCategories: CategoryManyRelationFilter
  featureInHomePage: BooleanFilter
  products: ProductManyRelationFilter
  creationDate: DateTimeNullableFilter
  lastUpdatedDate: DateTimeNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  featureInHomePage: OrderDirection
  creationDate: OrderDirection
  lastUpdatedDate: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  parentCategories: CategoryRelateToManyForUpdateInput
  childCategories: CategoryRelateToManyForUpdateInput
  featureInHomePage: Boolean
  products: ProductRelateToManyForUpdateInput
  additionalInformation: JSON
  creationDate: DateTime
  lastUpdatedDate: DateTime
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  parentCategories: CategoryRelateToManyForCreateInput
  childCategories: CategoryRelateToManyForCreateInput
  featureInHomePage: Boolean
  products: ProductRelateToManyForCreateInput
  additionalInformation: JSON
  creationDate: DateTime
  lastUpdatedDate: DateTime
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Tag {
  id: ID!
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  tag: String
}

input TagWhereUniqueInput {
  id: ID
  tag: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  products: ProductManyRelationFilter
  tag: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  tag: OrderDirection
}

input TagUpdateInput {
  products: ProductRelateToManyForUpdateInput
  tag: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  products: ProductRelateToManyForCreateInput
  tag: String
}

type Image {
  id: ID!
  image: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
}

input ImageOrderByInput {
  id: OrderDirection
}

input ImageUpdateInput {
  image: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: Upload
}

type Color {
  id: ID!
  name: String
  hexColor: String
}

input ColorWhereUniqueInput {
  id: ID
  name: String
  hexColor: String
}

input ColorWhereInput {
  AND: [ColorWhereInput!]
  OR: [ColorWhereInput!]
  NOT: [ColorWhereInput!]
  id: IDFilter
  name: StringFilter
  hexColor: StringFilter
}

input ColorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  hexColor: OrderDirection
}

input ColorUpdateInput {
  name: String
  hexColor: String
}

input ColorUpdateArgs {
  where: ColorWhereUniqueInput!
  data: ColorUpdateInput!
}

input ColorCreateInput {
  name: String
  hexColor: String
}

type EmbedLink {
  id: ID!
  embedLink: String
}

input EmbedLinkWhereUniqueInput {
  id: ID
}

input EmbedLinkWhereInput {
  AND: [EmbedLinkWhereInput!]
  OR: [EmbedLinkWhereInput!]
  NOT: [EmbedLinkWhereInput!]
  id: IDFilter
  embedLink: StringFilter
}

input EmbedLinkOrderByInput {
  id: OrderDirection
  embedLink: OrderDirection
}

input EmbedLinkUpdateInput {
  embedLink: String
}

input EmbedLinkUpdateArgs {
  where: EmbedLinkWhereUniqueInput!
  data: EmbedLinkUpdateInput!
}

input EmbedLinkCreateInput {
  embedLink: String
}

type Product {
  id: ID!
  name: String
  slug: String
  url: String
  status: String
  sku: Int
  description: String
  additionalInformation: Product_additionalInformation_Document
  options(
    where: ProductOptionWhereInput! = {}
    orderBy: [ProductOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOption!]
  optionsCount(where: ProductOptionWhereInput! = {}): Int
  colorPalette(
    where: ColorWhereInput! = {}
    orderBy: [ColorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Color!]
  colorPaletteCount(where: ColorWhereInput! = {}): Int
  defaultVariantOptions(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  defaultVariantOptionsCount(where: ProductOptionValueWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  variants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  variantsCount(where: ProductVariantWhereInput! = {}): Int
  accessories(
    where: AccessoryWhereInput! = {}
    orderBy: [AccessoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Accessory!]
  accessoriesCount(where: AccessoryWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  price: String
  saleCount: Int
  additionalImages(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  additionalImagesCount(where: ImageWhereInput! = {}): Int
  videoEmbedLinks(
    where: EmbedLinkWhereInput! = {}
    orderBy: [EmbedLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmbedLink!]
  videoEmbedLinksCount(where: EmbedLinkWhereInput! = {}): Int
  creationDate: DateTime
  lastUpdatedDate: DateTime
}

type Product_additionalInformation_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  sku: IntNullableFilter
  description: StringFilter
  options: ProductOptionManyRelationFilter
  colorPalette: ColorManyRelationFilter
  defaultVariantOptions: ProductOptionValueManyRelationFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  variants: ProductVariantManyRelationFilter
  accessories: AccessoryManyRelationFilter
  reviews: ReviewManyRelationFilter
  additionalImages: ImageManyRelationFilter
  videoEmbedLinks: EmbedLinkManyRelationFilter
  creationDate: DateTimeNullableFilter
  lastUpdatedDate: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductOptionManyRelationFilter {
  every: ProductOptionWhereInput
  some: ProductOptionWhereInput
  none: ProductOptionWhereInput
}

input ColorManyRelationFilter {
  every: ColorWhereInput
  some: ColorWhereInput
  none: ColorWhereInput
}

input ProductOptionValueManyRelationFilter {
  every: ProductOptionValueWhereInput
  some: ProductOptionValueWhereInput
  none: ProductOptionValueWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ProductVariantManyRelationFilter {
  every: ProductVariantWhereInput
  some: ProductVariantWhereInput
  none: ProductVariantWhereInput
}

input AccessoryManyRelationFilter {
  every: AccessoryWhereInput
  some: AccessoryWhereInput
  none: AccessoryWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input EmbedLinkManyRelationFilter {
  every: EmbedLinkWhereInput
  some: EmbedLinkWhereInput
  none: EmbedLinkWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  sku: OrderDirection
  description: OrderDirection
  creationDate: OrderDirection
  lastUpdatedDate: OrderDirection
}

input ProductUpdateInput {
  name: String
  slug: String
  status: String
  sku: Int
  description: String
  additionalInformation: JSON
  options: ProductOptionRelateToManyForUpdateInput
  colorPalette: ColorRelateToManyForUpdateInput
  defaultVariantOptions: ProductOptionValueRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  variants: ProductVariantRelateToManyForUpdateInput
  accessories: AccessoryRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  additionalImages: ImageRelateToManyForUpdateInput
  videoEmbedLinks: EmbedLinkRelateToManyForUpdateInput
  creationDate: DateTime
  lastUpdatedDate: DateTime
}

input ProductOptionRelateToManyForUpdateInput {
  disconnect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ColorRelateToManyForUpdateInput {
  disconnect: [ColorWhereUniqueInput!]
  set: [ColorWhereUniqueInput!]
  create: [ColorCreateInput!]
  connect: [ColorWhereUniqueInput!]
}

input ProductOptionValueRelateToManyForUpdateInput {
  disconnect: [ProductOptionValueWhereUniqueInput!]
  set: [ProductOptionValueWhereUniqueInput!]
  create: [ProductOptionValueCreateInput!]
  connect: [ProductOptionValueWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ProductVariantRelateToManyForUpdateInput {
  disconnect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input AccessoryRelateToManyForUpdateInput {
  disconnect: [AccessoryWhereUniqueInput!]
  set: [AccessoryWhereUniqueInput!]
  create: [AccessoryCreateInput!]
  connect: [AccessoryWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input EmbedLinkRelateToManyForUpdateInput {
  disconnect: [EmbedLinkWhereUniqueInput!]
  set: [EmbedLinkWhereUniqueInput!]
  create: [EmbedLinkCreateInput!]
  connect: [EmbedLinkWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  slug: String
  status: String
  sku: Int
  description: String
  additionalInformation: JSON
  options: ProductOptionRelateToManyForCreateInput
  colorPalette: ColorRelateToManyForCreateInput
  defaultVariantOptions: ProductOptionValueRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  variants: ProductVariantRelateToManyForCreateInput
  accessories: AccessoryRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  additionalImages: ImageRelateToManyForCreateInput
  videoEmbedLinks: EmbedLinkRelateToManyForCreateInput
  creationDate: DateTime
  lastUpdatedDate: DateTime
}

input ProductOptionRelateToManyForCreateInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ColorRelateToManyForCreateInput {
  create: [ColorCreateInput!]
  connect: [ColorWhereUniqueInput!]
}

input ProductOptionValueRelateToManyForCreateInput {
  create: [ProductOptionValueCreateInput!]
  connect: [ProductOptionValueWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ProductVariantRelateToManyForCreateInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input AccessoryRelateToManyForCreateInput {
  create: [AccessoryCreateInput!]
  connect: [AccessoryWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input EmbedLinkRelateToManyForCreateInput {
  create: [EmbedLinkCreateInput!]
  connect: [EmbedLinkWhereUniqueInput!]
}

type ProductOption {
  id: ID!
  option: String
  product: Product
  optionName: ProductOptionName
  optionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  optionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
}

input ProductOptionWhereUniqueInput {
  id: ID
}

input ProductOptionWhereInput {
  AND: [ProductOptionWhereInput!]
  OR: [ProductOptionWhereInput!]
  NOT: [ProductOptionWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  optionName: ProductOptionNameWhereInput
  optionValues: ProductOptionValueManyRelationFilter
}

input ProductOptionOrderByInput {
  id: OrderDirection
}

input ProductOptionUpdateInput {
  product: ProductRelateToOneForUpdateInput
  optionName: ProductOptionNameRelateToOneForUpdateInput
  optionValues: ProductOptionValueRelateToManyForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductOptionNameRelateToOneForUpdateInput {
  create: ProductOptionNameCreateInput
  connect: ProductOptionNameWhereUniqueInput
  disconnect: Boolean
}

input ProductOptionUpdateArgs {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateInput!
}

input ProductOptionCreateInput {
  product: ProductRelateToOneForCreateInput
  optionName: ProductOptionNameRelateToOneForCreateInput
  optionValues: ProductOptionValueRelateToManyForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductOptionNameRelateToOneForCreateInput {
  create: ProductOptionNameCreateInput
  connect: ProductOptionNameWhereUniqueInput
}

type ProductOptionName {
  id: ID!
  optionName: String
}

input ProductOptionNameWhereUniqueInput {
  id: ID
}

input ProductOptionNameWhereInput {
  AND: [ProductOptionNameWhereInput!]
  OR: [ProductOptionNameWhereInput!]
  NOT: [ProductOptionNameWhereInput!]
  id: IDFilter
  optionName: StringFilter
}

input ProductOptionNameOrderByInput {
  id: OrderDirection
  optionName: OrderDirection
}

input ProductOptionNameUpdateInput {
  optionName: String
}

input ProductOptionNameUpdateArgs {
  where: ProductOptionNameWhereUniqueInput!
  data: ProductOptionNameUpdateInput!
}

input ProductOptionNameCreateInput {
  optionName: String
}

type ProductOptionValue {
  id: ID!
  optionValue: String
}

input ProductOptionValueWhereUniqueInput {
  id: ID
}

input ProductOptionValueWhereInput {
  AND: [ProductOptionValueWhereInput!]
  OR: [ProductOptionValueWhereInput!]
  NOT: [ProductOptionValueWhereInput!]
  id: IDFilter
  optionValue: StringFilter
}

input ProductOptionValueOrderByInput {
  id: OrderDirection
  optionValue: OrderDirection
}

input ProductOptionValueUpdateInput {
  optionValue: String
}

input ProductOptionValueUpdateArgs {
  where: ProductOptionValueWhereUniqueInput!
  data: ProductOptionValueUpdateInput!
}

input ProductOptionValueCreateInput {
  optionValue: String
}

type ProductVariant {
  id: ID!
  product: Product
  options(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  optionsCount(where: ProductOptionValueWhereInput! = {}): Int
  title: String
  status: String
  description: String
  image: CloudinaryImage_File
  regularPrice: Int
  salePrice: Int
  price: Int
  salePercentage: Int
  length: Float
  width: Float
  height: Float
  weight: Float
  packageLength: Float
  packageWidth: Float
  packageHeight: Float
  sku: Stock
  stock: Int
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  options: ProductOptionValueManyRelationFilter
  status: StringNullableFilter
  description: StringFilter
  regularPrice: IntFilter
  salePrice: IntNullableFilter
  length: FloatNullableFilter
  width: FloatNullableFilter
  height: FloatNullableFilter
  weight: FloatFilter
  packageLength: FloatFilter
  packageWidth: FloatFilter
  packageHeight: FloatFilter
  sku: StockWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ProductVariantOrderByInput {
  id: OrderDirection
  status: OrderDirection
  description: OrderDirection
  regularPrice: OrderDirection
  salePrice: OrderDirection
  length: OrderDirection
  width: OrderDirection
  height: OrderDirection
  weight: OrderDirection
  packageLength: OrderDirection
  packageWidth: OrderDirection
  packageHeight: OrderDirection
}

input ProductVariantUpdateInput {
  product: ProductRelateToOneForUpdateInput
  options: ProductOptionValueRelateToManyForUpdateInput
  status: String
  description: String
  image: Upload
  regularPrice: Int
  salePrice: Int
  length: Float
  width: Float
  height: Float
  weight: Float
  packageLength: Float
  packageWidth: Float
  packageHeight: Float
  sku: StockRelateToOneForUpdateInput
}

input StockRelateToOneForUpdateInput {
  create: StockCreateInput
  connect: StockWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  product: ProductRelateToOneForCreateInput
  options: ProductOptionValueRelateToManyForCreateInput
  status: String
  description: String
  image: Upload
  regularPrice: Int
  salePrice: Int
  length: Float
  width: Float
  height: Float
  weight: Float
  packageLength: Float
  packageWidth: Float
  packageHeight: Float
  sku: StockRelateToOneForCreateInput
}

input StockRelateToOneForCreateInput {
  create: StockCreateInput
  connect: StockWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
}

type Accessory {
  id: ID!
  name: String
  status: String
  price: Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input AccessoryWhereUniqueInput {
  id: ID
}

input AccessoryWhereInput {
  AND: [AccessoryWhereInput!]
  OR: [AccessoryWhereInput!]
  NOT: [AccessoryWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  price: IntFilter
  products: ProductManyRelationFilter
}

input AccessoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input AccessoryUpdateInput {
  name: String
  status: String
  price: Int
  products: ProductRelateToManyForUpdateInput
}

input AccessoryUpdateArgs {
  where: AccessoryWhereUniqueInput!
  data: AccessoryUpdateInput!
}

input AccessoryCreateInput {
  name: String
  status: String
  price: Int
  products: ProductRelateToManyForCreateInput
}

type Stock {
  id: ID!
  sku: String
  product: Product
  variant: ProductVariant
  status: String
  stock: Int
  virtualStock: Int
  inboundStock(
    where: InboundStockWhereInput! = {}
    orderBy: [InboundStockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InboundStock!]
  inboundStockCount(where: InboundStockWhereInput! = {}): Int
  outboundStock(
    where: OutboundStockWhereInput! = {}
    orderBy: [OutboundStockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OutboundStock!]
  outboundStockCount(where: OutboundStockWhereInput! = {}): Int
  inventoryLocation: String
  vendor: Vendor
  subscribedCustomers(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  subscribedCustomersCount(where: CustomerWhereInput! = {}): Int
}

input StockWhereUniqueInput {
  id: ID
  sku: String
}

input StockWhereInput {
  AND: [StockWhereInput!]
  OR: [StockWhereInput!]
  NOT: [StockWhereInput!]
  id: IDFilter
  sku: StringFilter
  product: ProductWhereInput
  variant: ProductVariantWhereInput
  status: StringNullableFilter
  stock: IntFilter
  inboundStock: InboundStockManyRelationFilter
  outboundStock: OutboundStockManyRelationFilter
  inventoryLocation: StringFilter
  vendor: VendorWhereInput
  subscribedCustomers: CustomerManyRelationFilter
}

input InboundStockManyRelationFilter {
  every: InboundStockWhereInput
  some: InboundStockWhereInput
  none: InboundStockWhereInput
}

input OutboundStockManyRelationFilter {
  every: OutboundStockWhereInput
  some: OutboundStockWhereInput
  none: OutboundStockWhereInput
}

input CustomerManyRelationFilter {
  every: CustomerWhereInput
  some: CustomerWhereInput
  none: CustomerWhereInput
}

input StockOrderByInput {
  id: OrderDirection
  sku: OrderDirection
  status: OrderDirection
  stock: OrderDirection
  inventoryLocation: OrderDirection
}

input StockUpdateInput {
  sku: String
  product: ProductRelateToOneForUpdateInput
  variant: ProductVariantRelateToOneForUpdateInput
  status: String
  stock: Int
  inboundStock: InboundStockRelateToManyForUpdateInput
  outboundStock: OutboundStockRelateToManyForUpdateInput
  inventoryLocation: String
  vendor: VendorRelateToOneForUpdateInput
  subscribedCustomers: CustomerRelateToManyForUpdateInput
}

input ProductVariantRelateToOneForUpdateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
}

input InboundStockRelateToManyForUpdateInput {
  disconnect: [InboundStockWhereUniqueInput!]
  set: [InboundStockWhereUniqueInput!]
  create: [InboundStockCreateInput!]
  connect: [InboundStockWhereUniqueInput!]
}

input OutboundStockRelateToManyForUpdateInput {
  disconnect: [OutboundStockWhereUniqueInput!]
  set: [OutboundStockWhereUniqueInput!]
  create: [OutboundStockCreateInput!]
  connect: [OutboundStockWhereUniqueInput!]
}

input VendorRelateToOneForUpdateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
  disconnect: Boolean
}

input CustomerRelateToManyForUpdateInput {
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input StockUpdateArgs {
  where: StockWhereUniqueInput!
  data: StockUpdateInput!
}

input StockCreateInput {
  sku: String
  product: ProductRelateToOneForCreateInput
  variant: ProductVariantRelateToOneForCreateInput
  status: String
  stock: Int
  inboundStock: InboundStockRelateToManyForCreateInput
  outboundStock: OutboundStockRelateToManyForCreateInput
  inventoryLocation: String
  vendor: VendorRelateToOneForCreateInput
  subscribedCustomers: CustomerRelateToManyForCreateInput
}

input ProductVariantRelateToOneForCreateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

input InboundStockRelateToManyForCreateInput {
  create: [InboundStockCreateInput!]
  connect: [InboundStockWhereUniqueInput!]
}

input OutboundStockRelateToManyForCreateInput {
  create: [OutboundStockCreateInput!]
  connect: [OutboundStockWhereUniqueInput!]
}

input VendorRelateToOneForCreateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
}

input CustomerRelateToManyForCreateInput {
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

type InboundStock {
  id: ID!
  title: String
  sku: Stock
  stockQuantity: Int
  dateOfPurchase: DateTime
}

input InboundStockWhereUniqueInput {
  id: ID
}

input InboundStockWhereInput {
  AND: [InboundStockWhereInput!]
  OR: [InboundStockWhereInput!]
  NOT: [InboundStockWhereInput!]
  id: IDFilter
  sku: StockWhereInput
  stockQuantity: IntFilter
  dateOfPurchase: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input InboundStockOrderByInput {
  id: OrderDirection
  stockQuantity: OrderDirection
  dateOfPurchase: OrderDirection
}

input InboundStockUpdateInput {
  sku: StockRelateToOneForUpdateInput
  stockQuantity: Int
  dateOfPurchase: DateTime
}

input InboundStockUpdateArgs {
  where: InboundStockWhereUniqueInput!
  data: InboundStockUpdateInput!
}

input InboundStockCreateInput {
  sku: StockRelateToOneForCreateInput
  stockQuantity: Int
  dateOfPurchase: DateTime
}

type OutboundStock {
  id: ID!
  title: String
  sku: Stock
  stockQuantity: Int
  order: Order
}

input OutboundStockWhereUniqueInput {
  id: ID
}

input OutboundStockWhereInput {
  AND: [OutboundStockWhereInput!]
  OR: [OutboundStockWhereInput!]
  NOT: [OutboundStockWhereInput!]
  id: IDFilter
  sku: StockWhereInput
  stockQuantity: IntFilter
  order: OrderWhereInput
}

input OutboundStockOrderByInput {
  id: OrderDirection
  stockQuantity: OrderDirection
}

input OutboundStockUpdateInput {
  sku: StockRelateToOneForUpdateInput
  stockQuantity: Int
  order: OrderRelateToOneForUpdateInput
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OutboundStockUpdateArgs {
  where: OutboundStockWhereUniqueInput!
  data: OutboundStockUpdateInput!
}

input OutboundStockCreateInput {
  sku: StockRelateToOneForCreateInput
  stockQuantity: Int
  order: OrderRelateToOneForCreateInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Vendor {
  id: ID!
  name: String
  mobileNumber: String
  address: String
  skus(
    where: StockWhereInput! = {}
    orderBy: [StockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stock!]
  skusCount(where: StockWhereInput! = {}): Int
}

input VendorWhereUniqueInput {
  id: ID
}

input VendorWhereInput {
  AND: [VendorWhereInput!]
  OR: [VendorWhereInput!]
  NOT: [VendorWhereInput!]
  id: IDFilter
  name: StringFilter
  mobileNumber: StringFilter
  address: StringFilter
  skus: StockManyRelationFilter
}

input StockManyRelationFilter {
  every: StockWhereInput
  some: StockWhereInput
  none: StockWhereInput
}

input VendorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  mobileNumber: OrderDirection
  address: OrderDirection
}

input VendorUpdateInput {
  name: String
  mobileNumber: String
  address: String
  skus: StockRelateToManyForUpdateInput
}

input StockRelateToManyForUpdateInput {
  disconnect: [StockWhereUniqueInput!]
  set: [StockWhereUniqueInput!]
  create: [StockCreateInput!]
  connect: [StockWhereUniqueInput!]
}

input VendorUpdateArgs {
  where: VendorWhereUniqueInput!
  data: VendorUpdateInput!
}

input VendorCreateInput {
  name: String
  mobileNumber: String
  address: String
  skus: StockRelateToManyForCreateInput
}

input StockRelateToManyForCreateInput {
  create: [StockCreateInput!]
  connect: [StockWhereUniqueInput!]
}

type CartItem {
  id: ID!
  quantity: Int
  product: Product
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  product: ProductWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneForUpdateInput
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneForCreateInput
}

type Order {
  id: ID!
  orderNumber: String
  orderDate: DateTime
  status: String
  items(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  subTotal: Int
  subTotalINR: String
  shippingMethod: String
  shippingCharge: Int
  shipping: String
  discount: Int
  discountINR: String
  total: Int
  totalINR: String
  customer: Customer
  customerFirstName: String
  customerLastName: String
  customerName: String
  customerEmail: String
  customerPhoneNumber: String
  customerAlternatePhoneNumber: String
  customerContact: String
  shipToAddress1: String
  shipToAddress2: String
  shipToCity: String
  shipToState: String
  shipToCountry: String
  shipToPostalCode: String
  shipToAddress: String
  notes(
    where: OrderNoteWhereInput! = {}
    orderBy: [OrderNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderNote!]
  notesCount(where: OrderNoteWhereInput! = {}): Int
  cartJSON: JSON
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  orderNumber: StringFilter
  orderDate: DateTimeNullableFilter
  status: StringNullableFilter
  items: OrderItemManyRelationFilter
  subTotal: IntNullableFilter
  shippingMethod: StringFilter
  shippingCharge: IntNullableFilter
  discount: IntNullableFilter
  total: IntNullableFilter
  customer: CustomerWhereInput
  customerFirstName: StringFilter
  customerLastName: StringFilter
  customerEmail: StringFilter
  customerPhoneNumber: StringFilter
  customerAlternatePhoneNumber: StringFilter
  shipToAddress1: StringFilter
  shipToAddress2: StringFilter
  shipToCity: StringFilter
  shipToState: StringFilter
  shipToCountry: StringFilter
  shipToPostalCode: StringFilter
  notes: OrderNoteManyRelationFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input OrderNoteManyRelationFilter {
  every: OrderNoteWhereInput
  some: OrderNoteWhereInput
  none: OrderNoteWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  orderNumber: OrderDirection
  orderDate: OrderDirection
  status: OrderDirection
  subTotal: OrderDirection
  shippingMethod: OrderDirection
  shippingCharge: OrderDirection
  discount: OrderDirection
  total: OrderDirection
  customerFirstName: OrderDirection
  customerLastName: OrderDirection
  customerEmail: OrderDirection
  customerPhoneNumber: OrderDirection
  customerAlternatePhoneNumber: OrderDirection
  shipToAddress1: OrderDirection
  shipToAddress2: OrderDirection
  shipToCity: OrderDirection
  shipToState: OrderDirection
  shipToCountry: OrderDirection
  shipToPostalCode: OrderDirection
}

input OrderUpdateInput {
  orderNumber: String
  orderDate: DateTime
  status: String
  items: OrderItemRelateToManyForUpdateInput
  subTotal: Int
  shippingMethod: String
  shippingCharge: Int
  discount: Int
  total: Int
  customer: CustomerRelateToOneForUpdateInput
  customerFirstName: String
  customerLastName: String
  customerEmail: String
  customerPhoneNumber: String
  customerAlternatePhoneNumber: String
  shipToAddress1: String
  shipToAddress2: String
  shipToCity: String
  shipToState: String
  shipToCountry: String
  shipToPostalCode: String
  notes: OrderNoteRelateToManyForUpdateInput
  cartJSON: JSON
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input CustomerRelateToOneForUpdateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
}

input OrderNoteRelateToManyForUpdateInput {
  disconnect: [OrderNoteWhereUniqueInput!]
  set: [OrderNoteWhereUniqueInput!]
  create: [OrderNoteCreateInput!]
  connect: [OrderNoteWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  orderNumber: String
  orderDate: DateTime
  status: String
  items: OrderItemRelateToManyForCreateInput
  subTotal: Int
  shippingMethod: String
  shippingCharge: Int
  discount: Int
  total: Int
  customer: CustomerRelateToOneForCreateInput
  customerFirstName: String
  customerLastName: String
  customerEmail: String
  customerPhoneNumber: String
  customerAlternatePhoneNumber: String
  shipToAddress1: String
  shipToAddress2: String
  shipToCity: String
  shipToState: String
  shipToCountry: String
  shipToPostalCode: String
  notes: OrderNoteRelateToManyForCreateInput
  cartJSON: JSON
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input CustomerRelateToOneForCreateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input OrderNoteRelateToManyForCreateInput {
  create: [OrderNoteCreateInput!]
  connect: [OrderNoteWhereUniqueInput!]
}

type OrderItem {
  id: ID!
  order: Order
  item: String
  image: CloudinaryImage_File
  sku: Stock
  quantity: Int
  unitPrice: Int
  unitPriceINR: String
  total: Int
  totalINR: String
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  item: StringFilter
  sku: StockWhereInput
  quantity: IntFilter
  unitPrice: IntFilter
  total: IntFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  item: OrderDirection
  quantity: OrderDirection
  unitPrice: OrderDirection
  total: OrderDirection
}

input OrderItemUpdateInput {
  order: OrderRelateToOneForUpdateInput
  item: String
  image: Upload
  sku: StockRelateToOneForUpdateInput
  quantity: Int
  unitPrice: Int
  total: Int
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  order: OrderRelateToOneForCreateInput
  item: String
  image: Upload
  sku: StockRelateToOneForCreateInput
  quantity: Int
  unitPrice: Int
  total: Int
}

type OrderNote {
  id: ID!
  order: Order
  note: String
  date: DateTime
}

input OrderNoteWhereUniqueInput {
  id: ID
}

input OrderNoteWhereInput {
  AND: [OrderNoteWhereInput!]
  OR: [OrderNoteWhereInput!]
  NOT: [OrderNoteWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  note: StringFilter
  date: DateTimeNullableFilter
}

input OrderNoteOrderByInput {
  id: OrderDirection
  note: OrderDirection
  date: OrderDirection
}

input OrderNoteUpdateInput {
  order: OrderRelateToOneForUpdateInput
  note: String
  date: DateTime
}

input OrderNoteUpdateArgs {
  where: OrderNoteWhereUniqueInput!
  data: OrderNoteUpdateInput!
}

input OrderNoteCreateInput {
  order: OrderRelateToOneForCreateInput
  note: String
  date: DateTime
}

type Customer {
  id: ID!
  uid: String
  firstName: String
  lastName: String
  email: String
  status: String
  phoneNumber: String
  alternatePhoneNumber: String
  shipToAddress: String
  shipToAddress1: String
  shipToAddress2: String
  shipToCity: String
  shipToState: String
  shipToCountry: String
  shipToPostalCode: String
  skuSubscriptions(
    where: StockWhereInput! = {}
    orderBy: [StockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stock!]
  skuSubscriptionsCount(where: StockWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
}

input CustomerWhereUniqueInput {
  id: ID
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IDFilter
  uid: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  status: StringNullableFilter
  phoneNumber: StringFilter
  alternatePhoneNumber: StringFilter
  shipToAddress1: StringFilter
  shipToAddress2: StringFilter
  shipToCity: StringFilter
  shipToState: StringFilter
  shipToCountry: StringFilter
  shipToPostalCode: StringFilter
  skuSubscriptions: StockManyRelationFilter
  orders: OrderManyRelationFilter
  reviews: ReviewManyRelationFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input CustomerOrderByInput {
  id: OrderDirection
  uid: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  status: OrderDirection
  phoneNumber: OrderDirection
  alternatePhoneNumber: OrderDirection
  shipToAddress1: OrderDirection
  shipToAddress2: OrderDirection
  shipToCity: OrderDirection
  shipToState: OrderDirection
  shipToCountry: OrderDirection
  shipToPostalCode: OrderDirection
}

input CustomerUpdateInput {
  uid: String
  firstName: String
  lastName: String
  email: String
  status: String
  phoneNumber: String
  alternatePhoneNumber: String
  shipToAddress1: String
  shipToAddress2: String
  shipToCity: String
  shipToState: String
  shipToCountry: String
  shipToPostalCode: String
  skuSubscriptions: StockRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input CustomerUpdateArgs {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateInput!
}

input CustomerCreateInput {
  uid: String
  firstName: String
  lastName: String
  email: String
  status: String
  phoneNumber: String
  alternatePhoneNumber: String
  shipToAddress1: String
  shipToAddress2: String
  shipToCity: String
  shipToState: String
  shipToCountry: String
  shipToPostalCode: String
  skuSubscriptions: StockRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Discount {
  id: ID!
  couponCode: String
  startDate: DateTime
  endDate: DateTime
  discountCondition: DiscountCondition
  discountAction: DiscountAction
  offerText: String
}

input DiscountWhereUniqueInput {
  id: ID
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  id: IDFilter
  couponCode: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  discountCondition: DiscountConditionWhereInput
  discountAction: DiscountActionWhereInput
  offerText: StringFilter
}

input DiscountOrderByInput {
  id: OrderDirection
  couponCode: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  offerText: OrderDirection
}

input DiscountUpdateInput {
  couponCode: String
  startDate: DateTime
  endDate: DateTime
  discountCondition: DiscountConditionRelateToOneForUpdateInput
  discountAction: DiscountActionRelateToOneForUpdateInput
  offerText: String
}

input DiscountConditionRelateToOneForUpdateInput {
  create: DiscountConditionCreateInput
  connect: DiscountConditionWhereUniqueInput
  disconnect: Boolean
}

input DiscountActionRelateToOneForUpdateInput {
  create: DiscountActionCreateInput
  connect: DiscountActionWhereUniqueInput
  disconnect: Boolean
}

input DiscountUpdateArgs {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateInput!
}

input DiscountCreateInput {
  couponCode: String
  startDate: DateTime
  endDate: DateTime
  discountCondition: DiscountConditionRelateToOneForCreateInput
  discountAction: DiscountActionRelateToOneForCreateInput
  offerText: String
}

input DiscountConditionRelateToOneForCreateInput {
  create: DiscountConditionCreateInput
  connect: DiscountConditionWhereUniqueInput
}

input DiscountActionRelateToOneForCreateInput {
  create: DiscountActionCreateInput
  connect: DiscountActionWhereUniqueInput
}

type DiscountCondition {
  id: ID!
  minimumItemsPerOrder: Int
  productsIsIn(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsIsInCount(where: ProductWhereInput! = {}): Int
}

input DiscountConditionWhereUniqueInput {
  id: ID
}

input DiscountConditionWhereInput {
  AND: [DiscountConditionWhereInput!]
  OR: [DiscountConditionWhereInput!]
  NOT: [DiscountConditionWhereInput!]
  id: IDFilter
  minimumItemsPerOrder: IntFilter
  productsIsIn: ProductManyRelationFilter
}

input DiscountConditionOrderByInput {
  id: OrderDirection
  minimumItemsPerOrder: OrderDirection
}

input DiscountConditionUpdateInput {
  minimumItemsPerOrder: Int
  productsIsIn: ProductRelateToManyForUpdateInput
}

input DiscountConditionUpdateArgs {
  where: DiscountConditionWhereUniqueInput!
  data: DiscountConditionUpdateInput!
}

input DiscountConditionCreateInput {
  minimumItemsPerOrder: Int
  productsIsIn: ProductRelateToManyForCreateInput
}

type DiscountAction {
  id: ID!
  discountAmount: Int
  discountPercentage: Int
  freeShipping: String
  isSale: String
  freebieProducts(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  freebieProductsCount(where: ProductWhereInput! = {}): Int
}

input DiscountActionWhereUniqueInput {
  id: ID
}

input DiscountActionWhereInput {
  AND: [DiscountActionWhereInput!]
  OR: [DiscountActionWhereInput!]
  NOT: [DiscountActionWhereInput!]
  id: IDFilter
  discountAmount: IntNullableFilter
  discountPercentage: IntNullableFilter
  freeShipping: StringNullableFilter
  isSale: StringNullableFilter
  freebieProducts: ProductManyRelationFilter
}

input DiscountActionOrderByInput {
  id: OrderDirection
  discountAmount: OrderDirection
  discountPercentage: OrderDirection
  freeShipping: OrderDirection
  isSale: OrderDirection
}

input DiscountActionUpdateInput {
  discountAmount: Int
  discountPercentage: Int
  freeShipping: String
  isSale: String
  freebieProducts: ProductRelateToManyForUpdateInput
}

input DiscountActionUpdateArgs {
  where: DiscountActionWhereUniqueInput!
  data: DiscountActionUpdateInput!
}

input DiscountActionCreateInput {
  discountAmount: Int
  discountPercentage: Int
  freeShipping: String
  isSale: String
  freebieProducts: ProductRelateToManyForCreateInput
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type ShippingZone {
  id: ID!
  name: String
  country: String
  countryCode: String
  state: String
  stateCode: String
  methods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  methodsCount(where: ShippingMethodWhereInput! = {}): Int
}

input ShippingZoneWhereUniqueInput {
  id: ID
}

input ShippingZoneWhereInput {
  AND: [ShippingZoneWhereInput!]
  OR: [ShippingZoneWhereInput!]
  NOT: [ShippingZoneWhereInput!]
  id: IDFilter
  country: StringFilter
  countryCode: StringFilter
  state: StringFilter
  stateCode: StringFilter
  methods: ShippingMethodManyRelationFilter
}

input ShippingMethodManyRelationFilter {
  every: ShippingMethodWhereInput
  some: ShippingMethodWhereInput
  none: ShippingMethodWhereInput
}

input ShippingZoneOrderByInput {
  id: OrderDirection
  country: OrderDirection
  countryCode: OrderDirection
  state: OrderDirection
  stateCode: OrderDirection
}

input ShippingZoneUpdateInput {
  country: String
  countryCode: String
  state: String
  stateCode: String
  methods: ShippingMethodRelateToManyForUpdateInput
}

input ShippingMethodRelateToManyForUpdateInput {
  disconnect: [ShippingMethodWhereUniqueInput!]
  set: [ShippingMethodWhereUniqueInput!]
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

input ShippingZoneUpdateArgs {
  where: ShippingZoneWhereUniqueInput!
  data: ShippingZoneUpdateInput!
}

input ShippingZoneCreateInput {
  country: String
  countryCode: String
  state: String
  stateCode: String
  methods: ShippingMethodRelateToManyForCreateInput
}

input ShippingMethodRelateToManyForCreateInput {
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

type ShippingMethod {
  id: ID!
  name: String
  method: String
  zones(
    where: ShippingZoneWhereInput! = {}
    orderBy: [ShippingZoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingZone!]
  zonesCount(where: ShippingZoneWhereInput! = {}): Int
  expectedDeliveryText: String
  formula: String
  baseCost: Int
  charge: Int
  perEachKg: Int
  overKg: Int
}

input ShippingMethodWhereUniqueInput {
  id: ID
}

input ShippingMethodWhereInput {
  AND: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
  id: IDFilter
  name: StringFilter
  method: StringFilter
  zones: ShippingZoneManyRelationFilter
  expectedDeliveryText: StringFilter
  baseCost: IntFilter
  charge: IntFilter
  perEachKg: IntFilter
  overKg: IntFilter
}

input ShippingZoneManyRelationFilter {
  every: ShippingZoneWhereInput
  some: ShippingZoneWhereInput
  none: ShippingZoneWhereInput
}

input ShippingMethodOrderByInput {
  id: OrderDirection
  name: OrderDirection
  method: OrderDirection
  expectedDeliveryText: OrderDirection
  baseCost: OrderDirection
  charge: OrderDirection
  perEachKg: OrderDirection
  overKg: OrderDirection
}

input ShippingMethodUpdateInput {
  name: String
  method: String
  zones: ShippingZoneRelateToManyForUpdateInput
  expectedDeliveryText: String
  baseCost: Int
  charge: Int
  perEachKg: Int
  overKg: Int
}

input ShippingZoneRelateToManyForUpdateInput {
  disconnect: [ShippingZoneWhereUniqueInput!]
  set: [ShippingZoneWhereUniqueInput!]
  create: [ShippingZoneCreateInput!]
  connect: [ShippingZoneWhereUniqueInput!]
}

input ShippingMethodUpdateArgs {
  where: ShippingMethodWhereUniqueInput!
  data: ShippingMethodUpdateInput!
}

input ShippingMethodCreateInput {
  name: String
  method: String
  zones: ShippingZoneRelateToManyForCreateInput
  expectedDeliveryText: String
  baseCost: Int
  charge: Int
  perEachKg: Int
  overKg: Int
}

input ShippingZoneRelateToManyForCreateInput {
  create: [ShippingZoneCreateInput!]
  connect: [ShippingZoneWhereUniqueInput!]
}

type Review {
  id: ID!
  product: Product
  title: String
  message: String
  rating: String
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  videoEmbedLinks(
    where: EmbedLinkWhereInput! = {}
    orderBy: [EmbedLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmbedLink!]
  videoEmbedLinksCount(where: EmbedLinkWhereInput! = {}): Int
  customerName: String
  customerEmail: Customer
  isCelebrityReview: Boolean
  featureInHomePage: Boolean
  createdOn: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  title: StringFilter
  message: StringFilter
  rating: StringNullableFilter
  images: ImageManyRelationFilter
  videoEmbedLinks: EmbedLinkManyRelationFilter
  customerName: StringFilter
  customerEmail: CustomerWhereInput
  isCelebrityReview: BooleanFilter
  featureInHomePage: BooleanFilter
  createdOn: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  title: OrderDirection
  message: OrderDirection
  rating: OrderDirection
  customerName: OrderDirection
  isCelebrityReview: OrderDirection
  featureInHomePage: OrderDirection
  createdOn: OrderDirection
}

input ReviewUpdateInput {
  product: ProductRelateToOneForUpdateInput
  title: String
  message: String
  rating: String
  images: ImageRelateToManyForUpdateInput
  videoEmbedLinks: EmbedLinkRelateToManyForUpdateInput
  customerName: String
  customerEmail: CustomerRelateToOneForUpdateInput
  isCelebrityReview: Boolean
  featureInHomePage: Boolean
  createdOn: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  product: ProductRelateToOneForCreateInput
  title: String
  message: String
  rating: String
  images: ImageRelateToManyForCreateInput
  videoEmbedLinks: EmbedLinkRelateToManyForCreateInput
  customerName: String
  customerEmail: CustomerRelateToOneForCreateInput
  isCelebrityReview: Boolean
  featureInHomePage: Boolean
  createdOn: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  colors(
    where: ColorWhereInput! = {}
    orderBy: [ColorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Color!]
  color(where: ColorWhereUniqueInput!): Color
  colorsCount(where: ColorWhereInput! = {}): Int
  embedLinks(
    where: EmbedLinkWhereInput! = {}
    orderBy: [EmbedLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmbedLink!]
  embedLink(where: EmbedLinkWhereUniqueInput!): EmbedLink
  embedLinksCount(where: EmbedLinkWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productOptions(
    where: ProductOptionWhereInput! = {}
    orderBy: [ProductOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOption!]
  productOption(where: ProductOptionWhereUniqueInput!): ProductOption
  productOptionsCount(where: ProductOptionWhereInput! = {}): Int
  productOptionNames(
    where: ProductOptionNameWhereInput! = {}
    orderBy: [ProductOptionNameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionName!]
  productOptionName(
    where: ProductOptionNameWhereUniqueInput!
  ): ProductOptionName
  productOptionNamesCount(where: ProductOptionNameWhereInput! = {}): Int
  productOptionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  productOptionValue(
    where: ProductOptionValueWhereUniqueInput!
  ): ProductOptionValue
  productOptionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  accessories(
    where: AccessoryWhereInput! = {}
    orderBy: [AccessoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Accessory!]
  accessory(where: AccessoryWhereUniqueInput!): Accessory
  accessoriesCount(where: AccessoryWhereInput! = {}): Int
  stocks(
    where: StockWhereInput! = {}
    orderBy: [StockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stock!]
  stock(where: StockWhereUniqueInput!): Stock
  stocksCount(where: StockWhereInput! = {}): Int
  inboundStocks(
    where: InboundStockWhereInput! = {}
    orderBy: [InboundStockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InboundStock!]
  inboundStock(where: InboundStockWhereUniqueInput!): InboundStock
  inboundStocksCount(where: InboundStockWhereInput! = {}): Int
  outboundStocks(
    where: OutboundStockWhereInput! = {}
    orderBy: [OutboundStockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OutboundStock!]
  outboundStock(where: OutboundStockWhereUniqueInput!): OutboundStock
  outboundStocksCount(where: OutboundStockWhereInput! = {}): Int
  vendors(
    where: VendorWhereInput! = {}
    orderBy: [VendorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vendor!]
  vendor(where: VendorWhereUniqueInput!): Vendor
  vendorsCount(where: VendorWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  orderItems(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  orderNotes(
    where: OrderNoteWhereInput! = {}
    orderBy: [OrderNoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderNote!]
  orderNote(where: OrderNoteWhereUniqueInput!): OrderNote
  orderNotesCount(where: OrderNoteWhereInput! = {}): Int
  customers(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  customer(where: CustomerWhereUniqueInput!): Customer
  customersCount(where: CustomerWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discount(where: DiscountWhereUniqueInput!): Discount
  discountsCount(where: DiscountWhereInput! = {}): Int
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountCondition(
    where: DiscountConditionWhereUniqueInput!
  ): DiscountCondition
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  discountActions(
    where: DiscountActionWhereInput! = {}
    orderBy: [DiscountActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountAction!]
  discountAction(where: DiscountActionWhereUniqueInput!): DiscountAction
  discountActionsCount(where: DiscountActionWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  shippingZones(
    where: ShippingZoneWhereInput! = {}
    orderBy: [ShippingZoneOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingZone!]
  shippingZone(where: ShippingZoneWhereUniqueInput!): ShippingZone
  shippingZonesCount(where: ShippingZoneWhereInput! = {}): Int
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
