# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  addToCart(productId: ID): CartItem
  checkout(token: String!): Order
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductOption(data: ProductOptionCreateInput!): ProductOption
  createProductOptions(data: [ProductOptionCreateInput!]!): [ProductOption]
  updateProductOption(
    where: ProductOptionWhereUniqueInput!
    data: ProductOptionUpdateInput!
  ): ProductOption
  updateProductOptions(data: [ProductOptionUpdateArgs!]!): [ProductOption]
  deleteProductOption(where: ProductOptionWhereUniqueInput!): ProductOption
  deleteProductOptions(
    where: [ProductOptionWhereUniqueInput!]!
  ): [ProductOption]
  createProductOptionName(
    data: ProductOptionNameCreateInput!
  ): ProductOptionName
  createProductOptionNames(
    data: [ProductOptionNameCreateInput!]!
  ): [ProductOptionName]
  updateProductOptionName(
    where: ProductOptionNameWhereUniqueInput!
    data: ProductOptionNameUpdateInput!
  ): ProductOptionName
  updateProductOptionNames(
    data: [ProductOptionNameUpdateArgs!]!
  ): [ProductOptionName]
  deleteProductOptionName(
    where: ProductOptionNameWhereUniqueInput!
  ): ProductOptionName
  deleteProductOptionNames(
    where: [ProductOptionNameWhereUniqueInput!]!
  ): [ProductOptionName]
  createProductOptionValue(
    data: ProductOptionValueCreateInput!
  ): ProductOptionValue
  createProductOptionValues(
    data: [ProductOptionValueCreateInput!]!
  ): [ProductOptionValue]
  updateProductOptionValue(
    where: ProductOptionValueWhereUniqueInput!
    data: ProductOptionValueUpdateInput!
  ): ProductOptionValue
  updateProductOptionValues(
    data: [ProductOptionValueUpdateArgs!]!
  ): [ProductOptionValue]
  deleteProductOptionValue(
    where: ProductOptionValueWhereUniqueInput!
  ): ProductOptionValue
  deleteProductOptionValues(
    where: [ProductOptionValueWhereUniqueInput!]!
  ): [ProductOptionValue]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createStock(data: StockCreateInput!): Stock
  createStocks(data: [StockCreateInput!]!): [Stock]
  updateStock(where: StockWhereUniqueInput!, data: StockUpdateInput!): Stock
  updateStocks(data: [StockUpdateArgs!]!): [Stock]
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteStocks(where: [StockWhereUniqueInput!]!): [Stock]
  createVendor(data: VendorCreateInput!): Vendor
  createVendors(data: [VendorCreateInput!]!): [Vendor]
  updateVendor(where: VendorWhereUniqueInput!, data: VendorUpdateInput!): Vendor
  updateVendors(data: [VendorUpdateArgs!]!): [Vendor]
  deleteVendor(where: VendorWhereUniqueInput!): Vendor
  deleteVendors(where: [VendorWhereUniqueInput!]!): [Vendor]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(
    where: OrderItemWhereUniqueInput!
    data: OrderItemUpdateInput!
  ): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createDiscount(data: DiscountCreateInput!): Discount
  createDiscounts(data: [DiscountCreateInput!]!): [Discount]
  updateDiscount(
    where: DiscountWhereUniqueInput!
    data: DiscountUpdateInput!
  ): Discount
  updateDiscounts(data: [DiscountUpdateArgs!]!): [Discount]
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteDiscounts(where: [DiscountWhereUniqueInput!]!): [Discount]
  createDiscountCondition(
    data: DiscountConditionCreateInput!
  ): DiscountCondition
  createDiscountConditions(
    data: [DiscountConditionCreateInput!]!
  ): [DiscountCondition]
  updateDiscountCondition(
    where: DiscountConditionWhereUniqueInput!
    data: DiscountConditionUpdateInput!
  ): DiscountCondition
  updateDiscountConditions(
    data: [DiscountConditionUpdateArgs!]!
  ): [DiscountCondition]
  deleteDiscountCondition(
    where: DiscountConditionWhereUniqueInput!
  ): DiscountCondition
  deleteDiscountConditions(
    where: [DiscountConditionWhereUniqueInput!]!
  ): [DiscountCondition]
  createDiscountAction(data: DiscountActionCreateInput!): DiscountAction
  createDiscountActions(data: [DiscountActionCreateInput!]!): [DiscountAction]
  updateDiscountAction(
    where: DiscountActionWhereUniqueInput!
    data: DiscountActionUpdateInput!
  ): DiscountAction
  updateDiscountActions(data: [DiscountActionUpdateArgs!]!): [DiscountAction]
  deleteDiscountAction(where: DiscountActionWhereUniqueInput!): DiscountAction
  deleteDiscountActions(
    where: [DiscountActionWhereUniqueInput!]!
  ): [DiscountAction]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  cart(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartCount(where: CartItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  role: Role
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  cart: CartItemManyRelationFilter
  orders: OrderManyRelationFilter
  role: RoleWhereInput
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  cart: CartItemRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input CartItemRelateToManyForCreateInput {
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  parentCategories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  parentCategoriesCount(where: CategoryWhereInput! = {}): Int
  childCategories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  childCategoriesCount(where: CategoryWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  parentCategories: CategoryManyRelationFilter
  childCategories: CategoryManyRelationFilter
  products: ProductManyRelationFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  parentCategories: CategoryRelateToManyForUpdateInput
  childCategories: CategoryRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  parentCategories: CategoryRelateToManyForCreateInput
  childCategories: CategoryRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  status: String
  description: String
  additionalInformation: Product_additionalInformation_Document
  options(
    where: ProductOptionWhereInput! = {}
    orderBy: [ProductOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOption!]
  optionsCount(where: ProductOptionWhereInput! = {}): Int
  variants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  variantsCount(where: ProductVariantWhereInput! = {}): Int
  stock: Int
  vendor: Vendor
}

type Product_additionalInformation_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  description: StringFilter
  options: ProductOptionManyRelationFilter
  variants: ProductVariantManyRelationFilter
  vendor: VendorWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ProductOptionManyRelationFilter {
  every: ProductOptionWhereInput
  some: ProductOptionWhereInput
  none: ProductOptionWhereInput
}

input ProductVariantManyRelationFilter {
  every: ProductVariantWhereInput
  some: ProductVariantWhereInput
  none: ProductVariantWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  description: OrderDirection
}

input ProductUpdateInput {
  name: String
  status: String
  description: String
  additionalInformation: JSON
  options: ProductOptionRelateToManyForUpdateInput
  variants: ProductVariantRelateToManyForUpdateInput
  vendor: VendorRelateToOneForUpdateInput
}

input ProductOptionRelateToManyForUpdateInput {
  disconnect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductVariantRelateToManyForUpdateInput {
  disconnect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input VendorRelateToOneForUpdateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  status: String
  description: String
  additionalInformation: JSON
  options: ProductOptionRelateToManyForCreateInput
  variants: ProductVariantRelateToManyForCreateInput
  vendor: VendorRelateToOneForCreateInput
}

input ProductOptionRelateToManyForCreateInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductVariantRelateToManyForCreateInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input VendorRelateToOneForCreateInput {
  create: VendorCreateInput
  connect: VendorWhereUniqueInput
}

type ProductOption {
  id: ID!
  product: Product
  optionName: ProductOptionName
  optionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  optionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
}

input ProductOptionWhereUniqueInput {
  id: ID
}

input ProductOptionWhereInput {
  AND: [ProductOptionWhereInput!]
  OR: [ProductOptionWhereInput!]
  NOT: [ProductOptionWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  optionName: ProductOptionNameWhereInput
  optionValues: ProductOptionValueManyRelationFilter
}

input ProductOptionValueManyRelationFilter {
  every: ProductOptionValueWhereInput
  some: ProductOptionValueWhereInput
  none: ProductOptionValueWhereInput
}

input ProductOptionOrderByInput {
  id: OrderDirection
}

input ProductOptionUpdateInput {
  product: ProductRelateToOneForUpdateInput
  optionName: ProductOptionNameRelateToOneForUpdateInput
  optionValues: ProductOptionValueRelateToManyForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductOptionNameRelateToOneForUpdateInput {
  create: ProductOptionNameCreateInput
  connect: ProductOptionNameWhereUniqueInput
  disconnect: Boolean
}

input ProductOptionValueRelateToManyForUpdateInput {
  disconnect: [ProductOptionValueWhereUniqueInput!]
  set: [ProductOptionValueWhereUniqueInput!]
  create: [ProductOptionValueCreateInput!]
  connect: [ProductOptionValueWhereUniqueInput!]
}

input ProductOptionUpdateArgs {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateInput!
}

input ProductOptionCreateInput {
  product: ProductRelateToOneForCreateInput
  optionName: ProductOptionNameRelateToOneForCreateInput
  optionValues: ProductOptionValueRelateToManyForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductOptionNameRelateToOneForCreateInput {
  create: ProductOptionNameCreateInput
  connect: ProductOptionNameWhereUniqueInput
}

input ProductOptionValueRelateToManyForCreateInput {
  create: [ProductOptionValueCreateInput!]
  connect: [ProductOptionValueWhereUniqueInput!]
}

type ProductOptionName {
  id: ID!
  optionName: String
}

input ProductOptionNameWhereUniqueInput {
  id: ID
}

input ProductOptionNameWhereInput {
  AND: [ProductOptionNameWhereInput!]
  OR: [ProductOptionNameWhereInput!]
  NOT: [ProductOptionNameWhereInput!]
  id: IDFilter
  optionName: StringFilter
}

input ProductOptionNameOrderByInput {
  id: OrderDirection
  optionName: OrderDirection
}

input ProductOptionNameUpdateInput {
  optionName: String
}

input ProductOptionNameUpdateArgs {
  where: ProductOptionNameWhereUniqueInput!
  data: ProductOptionNameUpdateInput!
}

input ProductOptionNameCreateInput {
  optionName: String
}

type ProductOptionValue {
  id: ID!
  optionValue: String
}

input ProductOptionValueWhereUniqueInput {
  id: ID
}

input ProductOptionValueWhereInput {
  AND: [ProductOptionValueWhereInput!]
  OR: [ProductOptionValueWhereInput!]
  NOT: [ProductOptionValueWhereInput!]
  id: IDFilter
  optionValue: StringFilter
}

input ProductOptionValueOrderByInput {
  id: OrderDirection
  optionValue: OrderDirection
}

input ProductOptionValueUpdateInput {
  optionValue: String
}

input ProductOptionValueUpdateArgs {
  where: ProductOptionValueWhereUniqueInput!
  data: ProductOptionValueUpdateInput!
}

input ProductOptionValueCreateInput {
  optionValue: String
}

type ProductVariant {
  id: ID!
  product: Product
  title: String
  enabled: String
  defaultVariant: String
  description: String
  image: CloudinaryImage_File
  regularPrice: Int
  salePrice: Int
  length: Int
  width: Int
  height: Int
  weight: Int
  stock: Stock
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  title: StringFilter
  enabled: StringNullableFilter
  defaultVariant: StringNullableFilter
  description: StringFilter
  regularPrice: IntFilter
  salePrice: IntNullableFilter
  length: IntFilter
  width: IntFilter
  height: IntFilter
  weight: IntFilter
  stock: StockWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductVariantOrderByInput {
  id: OrderDirection
  title: OrderDirection
  enabled: OrderDirection
  defaultVariant: OrderDirection
  description: OrderDirection
  regularPrice: OrderDirection
  salePrice: OrderDirection
  length: OrderDirection
  width: OrderDirection
  height: OrderDirection
  weight: OrderDirection
}

input ProductVariantUpdateInput {
  product: ProductRelateToOneForUpdateInput
  title: String
  enabled: String
  defaultVariant: String
  description: String
  image: Upload
  regularPrice: Int
  salePrice: Int
  length: Int
  width: Int
  height: Int
  weight: Int
  stock: StockRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input StockRelateToOneForUpdateInput {
  create: StockCreateInput
  connect: StockWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  product: ProductRelateToOneForCreateInput
  title: String
  enabled: String
  defaultVariant: String
  description: String
  image: Upload
  regularPrice: Int
  salePrice: Int
  length: Int
  width: Int
  height: Int
  weight: Int
  stock: StockRelateToOneForCreateInput
}

input StockRelateToOneForCreateInput {
  create: StockCreateInput
  connect: StockWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
}

type Stock {
  id: ID!
  product: Product
  variant: ProductVariant
  stockQuantity: Int
  dateOfPurchase: DateTime
}

input StockWhereUniqueInput {
  id: ID
}

input StockWhereInput {
  AND: [StockWhereInput!]
  OR: [StockWhereInput!]
  NOT: [StockWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  variant: ProductVariantWhereInput
  stockQuantity: IntFilter
  dateOfPurchase: DateTimeNullableFilter
}

input StockOrderByInput {
  id: OrderDirection
  stockQuantity: OrderDirection
  dateOfPurchase: OrderDirection
}

input StockUpdateInput {
  product: ProductRelateToOneForUpdateInput
  variant: ProductVariantRelateToOneForUpdateInput
  stockQuantity: Int
  dateOfPurchase: DateTime
}

input ProductVariantRelateToOneForUpdateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
}

input StockUpdateArgs {
  where: StockWhereUniqueInput!
  data: StockUpdateInput!
}

input StockCreateInput {
  product: ProductRelateToOneForCreateInput
  variant: ProductVariantRelateToOneForCreateInput
  stockQuantity: Int
  dateOfPurchase: DateTime
}

input ProductVariantRelateToOneForCreateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

type Vendor {
  id: ID!
  name: String
  mobileNumber: String
  address: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input VendorWhereUniqueInput {
  id: ID
}

input VendorWhereInput {
  AND: [VendorWhereInput!]
  OR: [VendorWhereInput!]
  NOT: [VendorWhereInput!]
  id: IDFilter
  name: StringFilter
  mobileNumber: StringFilter
  address: StringFilter
  products: ProductManyRelationFilter
}

input VendorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  mobileNumber: OrderDirection
  address: OrderDirection
}

input VendorUpdateInput {
  name: String
  mobileNumber: String
  address: String
  products: ProductRelateToManyForUpdateInput
}

input VendorUpdateArgs {
  where: VendorWhereUniqueInput!
  data: VendorUpdateInput!
}

input VendorCreateInput {
  name: String
  mobileNumber: String
  address: String
  products: ProductRelateToManyForCreateInput
}

type CartItem {
  id: ID!
  quantity: Int
  product: Product
  user: User
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  product: ProductWhereInput
  user: UserWhereInput
}

input CartItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input CartItemUpdateInput {
  quantity: Int
  product: ProductRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  quantity: Int
  product: ProductRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type OrderItem {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  price: Int
  quantity: Int
  order: Order
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  photo: ProductImageWhereInput
  price: IntNullableFilter
  quantity: IntNullableFilter
  order: OrderWhereInput
}

input OrderItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
}

input OrderItemUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForUpdateInput
  price: Int
  quantity: Int
  order: OrderRelateToOneForUpdateInput
}

input ProductImageRelateToOneForUpdateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForCreateInput
  price: Int
  quantity: Int
  order: OrderRelateToOneForCreateInput
}

input ProductImageRelateToOneForCreateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Order {
  id: ID!
  label: String
  total: Int
  items(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  user: User
  charge: String
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  total: IntNullableFilter
  items: OrderItemManyRelationFilter
  user: UserWhereInput
  charge: StringFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  total: OrderDirection
  charge: OrderDirection
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  charge: String
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  charge: String
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

type Discount {
  id: ID!
  couponCode: String
  startDate: DateTime
  endDate: DateTime
  discountCondition: DiscountCondition
  discountAction: DiscountAction
  offerText: String
}

input DiscountWhereUniqueInput {
  id: ID
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  id: IDFilter
  couponCode: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  discountCondition: DiscountConditionWhereInput
  discountAction: DiscountActionWhereInput
  offerText: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DiscountOrderByInput {
  id: OrderDirection
  couponCode: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  offerText: OrderDirection
}

input DiscountUpdateInput {
  couponCode: String
  startDate: DateTime
  endDate: DateTime
  discountCondition: DiscountConditionRelateToOneForUpdateInput
  discountAction: DiscountActionRelateToOneForUpdateInput
  offerText: String
}

input DiscountConditionRelateToOneForUpdateInput {
  create: DiscountConditionCreateInput
  connect: DiscountConditionWhereUniqueInput
  disconnect: Boolean
}

input DiscountActionRelateToOneForUpdateInput {
  create: DiscountActionCreateInput
  connect: DiscountActionWhereUniqueInput
  disconnect: Boolean
}

input DiscountUpdateArgs {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateInput!
}

input DiscountCreateInput {
  couponCode: String
  startDate: DateTime
  endDate: DateTime
  discountCondition: DiscountConditionRelateToOneForCreateInput
  discountAction: DiscountActionRelateToOneForCreateInput
  offerText: String
}

input DiscountConditionRelateToOneForCreateInput {
  create: DiscountConditionCreateInput
  connect: DiscountConditionWhereUniqueInput
}

input DiscountActionRelateToOneForCreateInput {
  create: DiscountActionCreateInput
  connect: DiscountActionWhereUniqueInput
}

type DiscountCondition {
  id: ID!
  minimumItemsPerOrder: Int
  productsIsIn(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsIsInCount(where: ProductWhereInput! = {}): Int
}

input DiscountConditionWhereUniqueInput {
  id: ID
}

input DiscountConditionWhereInput {
  AND: [DiscountConditionWhereInput!]
  OR: [DiscountConditionWhereInput!]
  NOT: [DiscountConditionWhereInput!]
  id: IDFilter
  minimumItemsPerOrder: IntFilter
  productsIsIn: ProductManyRelationFilter
}

input DiscountConditionOrderByInput {
  id: OrderDirection
  minimumItemsPerOrder: OrderDirection
}

input DiscountConditionUpdateInput {
  minimumItemsPerOrder: Int
  productsIsIn: ProductRelateToManyForUpdateInput
}

input DiscountConditionUpdateArgs {
  where: DiscountConditionWhereUniqueInput!
  data: DiscountConditionUpdateInput!
}

input DiscountConditionCreateInput {
  minimumItemsPerOrder: Int
  productsIsIn: ProductRelateToManyForCreateInput
}

type DiscountAction {
  id: ID!
  discountAmount: Int
  discountPercentage: Int
  freeShipping: String
  isSale: String
  freebieProducts(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  freebieProductsCount(where: ProductWhereInput! = {}): Int
}

input DiscountActionWhereUniqueInput {
  id: ID
}

input DiscountActionWhereInput {
  AND: [DiscountActionWhereInput!]
  OR: [DiscountActionWhereInput!]
  NOT: [DiscountActionWhereInput!]
  id: IDFilter
  discountAmount: IntNullableFilter
  discountPercentage: IntNullableFilter
  freeShipping: StringNullableFilter
  isSale: StringNullableFilter
  freebieProducts: ProductManyRelationFilter
}

input DiscountActionOrderByInput {
  id: OrderDirection
  discountAmount: OrderDirection
  discountPercentage: OrderDirection
  freeShipping: OrderDirection
  isSale: OrderDirection
}

input DiscountActionUpdateInput {
  discountAmount: Int
  discountPercentage: Int
  freeShipping: String
  isSale: String
  freebieProducts: ProductRelateToManyForUpdateInput
}

input DiscountActionUpdateArgs {
  where: DiscountActionWhereUniqueInput!
  data: DiscountActionUpdateInput!
}

input DiscountActionCreateInput {
  discountAmount: Int
  discountPercentage: Int
  freeShipping: String
  isSale: String
  freebieProducts: ProductRelateToManyForCreateInput
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productOptions(
    where: ProductOptionWhereInput! = {}
    orderBy: [ProductOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOption!]
  productOption(where: ProductOptionWhereUniqueInput!): ProductOption
  productOptionsCount(where: ProductOptionWhereInput! = {}): Int
  productOptionNames(
    where: ProductOptionNameWhereInput! = {}
    orderBy: [ProductOptionNameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionName!]
  productOptionName(
    where: ProductOptionNameWhereUniqueInput!
  ): ProductOptionName
  productOptionNamesCount(where: ProductOptionNameWhereInput! = {}): Int
  productOptionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  productOptionValue(
    where: ProductOptionValueWhereUniqueInput!
  ): ProductOptionValue
  productOptionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  stocks(
    where: StockWhereInput! = {}
    orderBy: [StockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stock!]
  stock(where: StockWhereUniqueInput!): Stock
  stocksCount(where: StockWhereInput! = {}): Int
  vendors(
    where: VendorWhereInput! = {}
    orderBy: [VendorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vendor!]
  vendor(where: VendorWhereUniqueInput!): Vendor
  vendorsCount(where: VendorWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  orderItems(
    where: OrderItemWhereInput! = {}
    orderBy: [OrderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OrderItem!]
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discount(where: DiscountWhereUniqueInput!): Discount
  discountsCount(where: DiscountWhereInput! = {}): Int
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountCondition(
    where: DiscountConditionWhereUniqueInput!
  ): DiscountCondition
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  discountActions(
    where: DiscountActionWhereInput! = {}
    orderBy: [DiscountActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountAction!]
  discountAction(where: DiscountActionWhereUniqueInput!): DiscountAction
  discountActionsCount(where: DiscountActionWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
